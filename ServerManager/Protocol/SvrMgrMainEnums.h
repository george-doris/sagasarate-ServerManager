#pragma once



enum MSG_RESULT
{
	MSG_RESULT_SUCCEED = 0,
	MSG_RESULT_FAILED = 1,
	MSG_RESULT_FILE_NOT_EXIST = 2,
	MSG_RESULT_DIR_NOT_EXIST = 3,
	MSG_RESULT_INVALID_SCRIPT = 4,
	MSG_RESULT_ONE_SCRIPT_IS_EXCUTING = 5,
	MSG_RESULT_SCRIPT_FILE_NOT_EXIST = 6,
	MSG_RESULT_SCRIPT_FILE_READ_ERROR = 7,
	MSG_RESULT_SERVICE_NOT_EXIST = 8,
	MSG_RESULT_QUERY_SEQUENCE_ERROR = 9,
	MSG_RESULT_QUERY_SIZE_TOO_BIG = 10,
	MSG_RESULT_DATA_COMPRESS_ERROR = 11,
	MSG_RESULT_FILE_WRITE_ERROR = 12,
	MSG_RESULT_FILE_READ_ERROR = 13,
	MSG_RESULT_SERVICE_ID_IS_USED = 14,
	MSG_RESULT_SERVICE_TYPE_NOT_SUPPORT = 15,
	MSG_RESULT_USER_NAME_OR_PASSWORD_ERROR = 16,
	MSG_RESULT_CONTROL_PIPE_NOT_AVAILABLE = 17,
	MSG_RESULT_SHUTDOWN_CMD_NOT_SET = 18,
	MSG_RESULT_IS_BUSY = 19,
	MSG_RESULT_NOT_SUPPORT = 20,
	
};

const UINT g_MSG_RESULT_COUNT = 21;
const UINT g_MSG_RESULT_LIST[21]={MSG_RESULT::MSG_RESULT_SUCCEED,MSG_RESULT::MSG_RESULT_FAILED,MSG_RESULT::MSG_RESULT_FILE_NOT_EXIST,MSG_RESULT::MSG_RESULT_DIR_NOT_EXIST,MSG_RESULT::MSG_RESULT_INVALID_SCRIPT,MSG_RESULT::MSG_RESULT_ONE_SCRIPT_IS_EXCUTING,MSG_RESULT::MSG_RESULT_SCRIPT_FILE_NOT_EXIST,MSG_RESULT::MSG_RESULT_SCRIPT_FILE_READ_ERROR,MSG_RESULT::MSG_RESULT_SERVICE_NOT_EXIST,MSG_RESULT::MSG_RESULT_QUERY_SEQUENCE_ERROR,MSG_RESULT::MSG_RESULT_QUERY_SIZE_TOO_BIG,MSG_RESULT::MSG_RESULT_DATA_COMPRESS_ERROR,MSG_RESULT::MSG_RESULT_FILE_WRITE_ERROR,MSG_RESULT::MSG_RESULT_FILE_READ_ERROR,MSG_RESULT::MSG_RESULT_SERVICE_ID_IS_USED,MSG_RESULT::MSG_RESULT_SERVICE_TYPE_NOT_SUPPORT,MSG_RESULT::MSG_RESULT_USER_NAME_OR_PASSWORD_ERROR,MSG_RESULT::MSG_RESULT_CONTROL_PIPE_NOT_AVAILABLE,MSG_RESULT::MSG_RESULT_SHUTDOWN_CMD_NOT_SET,MSG_RESULT::MSG_RESULT_IS_BUSY,MSG_RESULT::MSG_RESULT_NOT_SUPPORT};

const LPCTSTR g_szMSG_RESULT[21]={_T("成功"),_T("失败"),_T("文件不存在"),_T("目录不存在"),_T("非法脚本"),_T("已有脚本在执行"),_T("脚本文件不存在"),_T("脚本文件读取错误"),_T("服务不存在"),_T("请求序列错误"),_T("请就数据过大"),_T("数据压缩错误"),_T("文件写入错误"),_T("文件读取错误"),_T("服务ID已被占用"),_T("服务类型不支持"),_T("用户名或密码错误"),_T("控制管道不可用"),_T("关服命令未设置"),_T("系统忙"),_T("功能不支持")};


inline LPCTSTR MSG_RESULT_To_Str(UINT Value)
{
	if (Value < 21)
	{
		return g_szMSG_RESULT[Value];
	}
	return _T("未知");
}

inline UINT Str_To_MSG_RESULT(LPCTSTR Str)
{
	if (CompareString(Str, _T("成功")) == 0)
		return MSG_RESULT::MSG_RESULT_SUCCEED;
	
	else if (CompareString(Str, _T("失败")) == 0)
		return MSG_RESULT::MSG_RESULT_FAILED;
	
	else if (CompareString(Str, _T("文件不存在")) == 0)
		return MSG_RESULT::MSG_RESULT_FILE_NOT_EXIST;
	
	else if (CompareString(Str, _T("目录不存在")) == 0)
		return MSG_RESULT::MSG_RESULT_DIR_NOT_EXIST;
	
	else if (CompareString(Str, _T("非法脚本")) == 0)
		return MSG_RESULT::MSG_RESULT_INVALID_SCRIPT;
	
	else if (CompareString(Str, _T("已有脚本在执行")) == 0)
		return MSG_RESULT::MSG_RESULT_ONE_SCRIPT_IS_EXCUTING;
	
	else if (CompareString(Str, _T("脚本文件不存在")) == 0)
		return MSG_RESULT::MSG_RESULT_SCRIPT_FILE_NOT_EXIST;
	
	else if (CompareString(Str, _T("脚本文件读取错误")) == 0)
		return MSG_RESULT::MSG_RESULT_SCRIPT_FILE_READ_ERROR;
	
	else if (CompareString(Str, _T("服务不存在")) == 0)
		return MSG_RESULT::MSG_RESULT_SERVICE_NOT_EXIST;
	
	else if (CompareString(Str, _T("请求序列错误")) == 0)
		return MSG_RESULT::MSG_RESULT_QUERY_SEQUENCE_ERROR;
	
	else if (CompareString(Str, _T("请就数据过大")) == 0)
		return MSG_RESULT::MSG_RESULT_QUERY_SIZE_TOO_BIG;
	
	else if (CompareString(Str, _T("数据压缩错误")) == 0)
		return MSG_RESULT::MSG_RESULT_DATA_COMPRESS_ERROR;
	
	else if (CompareString(Str, _T("文件写入错误")) == 0)
		return MSG_RESULT::MSG_RESULT_FILE_WRITE_ERROR;
	
	else if (CompareString(Str, _T("文件读取错误")) == 0)
		return MSG_RESULT::MSG_RESULT_FILE_READ_ERROR;
	
	else if (CompareString(Str, _T("服务ID已被占用")) == 0)
		return MSG_RESULT::MSG_RESULT_SERVICE_ID_IS_USED;
	
	else if (CompareString(Str, _T("服务类型不支持")) == 0)
		return MSG_RESULT::MSG_RESULT_SERVICE_TYPE_NOT_SUPPORT;
	
	else if (CompareString(Str, _T("用户名或密码错误")) == 0)
		return MSG_RESULT::MSG_RESULT_USER_NAME_OR_PASSWORD_ERROR;
	
	else if (CompareString(Str, _T("控制管道不可用")) == 0)
		return MSG_RESULT::MSG_RESULT_CONTROL_PIPE_NOT_AVAILABLE;
	
	else if (CompareString(Str, _T("关服命令未设置")) == 0)
		return MSG_RESULT::MSG_RESULT_SHUTDOWN_CMD_NOT_SET;
	
	else if (CompareString(Str, _T("系统忙")) == 0)
		return MSG_RESULT::MSG_RESULT_IS_BUSY;
	
	else if (CompareString(Str, _T("功能不支持")) == 0)
		return MSG_RESULT::MSG_RESULT_NOT_SUPPORT;
	
	return MSG_RESULT::MSG_RESULT_NOT_SUPPORT;
}





enum SERVICE_STATUS_TYPE
{
	SERVICE_STATUS_NONE = 0,
	SERVICE_STATUS_STOP = 1,
	SERVICE_STATUS_RUNNING = 2,
	SERVICE_STATUS_SHUTDOWNNING = 3,
	SERVICE_STATUS_STARTUPPING = 4,
	
};




enum SERVICE_TYPE
{
	SERVICE_TYPE_NORMAL = 0,
	SERVICE_TYPE_WIN_SERVICE = 1,
	SERVICE_TYPE_DIRECTORY = 2,
	
};

const UINT g_SERVICE_TYPE_COUNT = 3;
const UINT g_SERVICE_TYPE_LIST[3]={SERVICE_TYPE::SERVICE_TYPE_NORMAL,SERVICE_TYPE::SERVICE_TYPE_WIN_SERVICE,SERVICE_TYPE::SERVICE_TYPE_DIRECTORY};

const LPCTSTR g_szSERVICE_TYPE[3]={_T("普通服务"),_T("Windows服务"),_T("目录")};


inline LPCTSTR SERVICE_TYPE_To_Str(UINT Value)
{
	if (Value < 3)
	{
		return g_szSERVICE_TYPE[Value];
	}
	return _T("未知");
}

inline UINT Str_To_SERVICE_TYPE(LPCTSTR Str)
{
	if (CompareString(Str, _T("普通服务")) == 0)
		return SERVICE_TYPE::SERVICE_TYPE_NORMAL;
	
	else if (CompareString(Str, _T("Windows服务")) == 0)
		return SERVICE_TYPE::SERVICE_TYPE_WIN_SERVICE;
	
	else if (CompareString(Str, _T("目录")) == 0)
		return SERVICE_TYPE::SERVICE_TYPE_DIRECTORY;
	
	return SERVICE_TYPE::SERVICE_TYPE_DIRECTORY;
}





enum SERVICE_OPERATION_TYPE
{
	SERVICE_OPERATION_NONE = 0,
	SERVICE_OPERATION_STARTUP = 1,
	SERVICE_OPERATION_SHUTDOWN = 2,
	
};




enum FILE_ATTRIBUTE_FLAG
{
	FILE_ATTRIBUTE_FLAG_DIRECTORY = 1,
	FILE_ATTRIBUTE_FLAG_CAN_EXEC = (1<<1),
	
};




enum SERVICE_SHUTDOWN_TYPE
{
	SERVICE_SHUTDOWN_TYPE_NORMAL = 0,
	SERVICE_SHUTDOWN_TYPE_FORCE = 1,
	SERVICE_SHUTDOWN_TYPE_SAFE = 2,
	
};




